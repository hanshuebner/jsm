// Load the C++ extension, extend it by some convenience functions

var MIDI = require('../build/default/MIDI.node');

for (var i in MIDI) {
    exports[i] = MIDI[i];
}

function messageToString(message) {
    var asString = '';
    for (var j = 0; j < message.length; j++) {
        if (j > 0) {
            asString += ' ';
        }
        asString += message[j].toString(16);
    }
    return asString;
}

exports.messageToString = messageToString;

MIDI.MIDIOutput.prototype.sendNote = function (note, velocity, time) {
    this.send([ 0x90 + (this.channel || 0), note, velocity ],
             time);
}

MIDI.MIDIInput.prototype.recvText = function(callback) {
    this.recv(function (midiInput, data) {
        var stringData = [];
        for (var i in data) {
            stringData.push(messageToString(data[i]));
        }
        callback(midiInput, stringData);
    });
}

function generateEvents(midiInput, messages, error)
{
    if (error) {
        midiInput.emit('error', error);
        return;
    }
    for (var i in messages) {
        var message = messages[i];
        var channel = message[0] & 0x0f;
        switch (message[0] & 0xf0) {
        case 0x80:
            midiInput.emit('noteOff', message[1], message[2], channel);
            break;
        case 0x90:
            midiInput.emit('noteOn',  message[1], message[2], channel);
            break;
        case 0xA0:
            midiInput.emit('polyphonicKeyPressure',  message[1], message[2], channel);
            break;
        case 0xB0:
            midiInput.emit('controlChange',  message[1], message[2], channel);
            break;
        case 0xC0:
            midiInput.emit('programChange', message[1], channel);
            break;
        case 0xD0:
            midiInput.emit('channelPressure', message[1], channel);
            break;
        case 0xE0:
            midiInput.emit('pitchWheelChange',  message[1], message[2], channel);
            break;
        case 0xF0:
            switch (message[0] & 0x0f) {
            // system common messages
            case 0x00:
                midiInput.emit('sysex', message);
                break;
            case 0x01:
                midiInput.emit('midiTimeCodeQuarterFrame', message[1]);
                break;
            case 0x02:
                midiInput.emit('songPositionPointer', message[1], message[2]);
                break;
            case 0x03:
                midiInput.emit('songSelect', message[1]);
                break;
            case 0x04:
            case 0x05:
                console.log("unexpected midi message code 0x" + message[0].toString(16));
                break;
            case 0x06:
                midiInput.emit('tuneRequest');
                break;
            case 0x07:
                console.log("unexpected end of sysex byte at the beginning of a message");
                break;
            // system real time messages
            case 0x08:
                midiInput.emit('timingClock');
                break;
            case 0x09:
            case 0x0D:
                console.log("unexpected system real time message 0x" + message[0].toString(16));
                break;
            case 0x0A:
                midiInput.emit('start');
                break;
            case 0x0B:
                midiInput.emit('continue');
                break;
            case 0x0C:
                midiInput.emit('stop');
                break;
            case 0x0E:
                midiInput.emit('activeSensing');
                break;
            case 0x0F:
                midiInput.emit('reset');
            }
            break;
        default:
            console.log("illegal MIDI message status code 0x" + message[0].toString(16));
        }
    }
            
    midiInput.recv(arguments.callee);
}

MIDI.MIDIInput.prototype.listen = function()
{
    this.recv(generateEvents)
}